#! /bin/sh

######################################################################
#
# VIEW_METROLOC_0.SH
# 列車接近情報を表示(一般仕様)
# Written by Rich Mikan(richmikan@richlab.org) at 2014/09/16
#
# [入力]
# ・引数で下記を指定
#     $1 : 今見たい駅の駅ナンバー
#     $2 : 行先を指示するための駅ナンバー(同じ路線であること)
# ・下記のファイルを用意しておく
#    1. CONF/ACCESSTOKEN.TXT
#       コンテストで与えられたアクセストークンを記述したテキスト
#    2. DATA/SNUM2RWSN_MST.TXT
#       駅ナンバーから路線名や駅名等を引くマスターファイル
#    3. DATA/METRO_VOC_MST.TXT
#       その他(種別・行先名・車両所有業者名等)のボキャブラリーマスターファイル
#    ※ 2,3のファイルはMK_METRO_MST.SHを実行すると得られる。
# [出力]
# ・列車接近情報を標準出力に出す
# ・フォーマットは次のとおり
#   - ヘッダー部
#     "YYYY/MM/DD hh:mm:ss現在"
#   - 空行(1行)
#   - ボディー部
#     1:自位置インデックス 2:駅ナンバー(駅間の場合は"|")+駅名(駅間の場合は"-")
#     3:列車情報(種別名+目的駅名+車両所有業者名)
#
# [備考]
# ・要curlコマンド
# ・以下の路線は、分岐があるため正常に表示されない。(見ればわかるレベル)
#   - 千代田線(綾瀬から北綾瀬支線への分岐)
#   - 副都心線・有楽町線(小竹向原で西武有楽町線への分岐)
#   - 南北線(白金高輪から都営三田線への分岐)
#   - 丸ノ内線(中野坂上から方南町支線への分岐)
#
######################################################################


######################################################################
# 初期設定
######################################################################

# --- 使用法表示関数定義 ---------------------------------------------
print_usage_and_exit() {
  local s
  s=$(awk 'BEGIN{printf("%070d",0)}' | tr 0 '#')
  awk "f==1&&/^${s}\$/{print;exit} f==0&&/^${s}\$/{f=1} f==1{print;}" "$0" 1>&2
  exit 1
}

# --- このシステムのホームディレクトリー -----------------------------
Homedir="$(d=${0%/*}/; [ "_$d" = "_$0/" ] && d='./'; cd "$d.."; pwd)"

# --- 必要なマスターファイルの存在確認 -------------------------------
# 1)駅ナンバーマスター
if [ ! -f "$Homedir/DATA/SNUM2RWSN_MST.TXT" ]; then
  echo "${0##*/}: The master file (SNUM2RWSN_MST.TXT) is not found." 2>&1
  exit 1
fi
# 2)各種ボキャブラリーマスター
if [ ! -f "$Homedir/DATA/METRO_VOC_MST.TXT" ]; then
  echo "${0##*/}: The master file (SNUM2RWSN_MST.TXT) is not found." 2>&1
  exit 1
fi

# --- 与えられたアクセストークンを設定 -------------------------------
File_token=$Homedir/CONF/ACCESSTOKEN.TXT
if [ ! -f "$File_token" ]; then
  echo "${0##*/}: The file contains access token is not found." 2>&1
  exit 1
fi
appid=$(env - awk '/^[[:alnum:]]+$/' "$File_token")
if [ -z "$appid" ]; then
  echo "${0##*/}: The access token is not valid." 2>&1
  exit 1
fi

# --- その他定義 -----------------------------------------------------
# 1)コマンドパスの追加
PATH="$Homedir/UTL:$Homedir/TOOL:$PATH"
# 2)一時ファイル格納先
Tmp=/tmp/${0##*/}.$$
# 3)終了時の一時ファイル削除設定
exit_trap() { rm -f $Tmp-*; }
trap "exit_trap" EXIT HUP INT QUIT PIPE ALRM TERM


######################################################################
# 引数確認・取得
######################################################################

# --- 書式の正当性確認 -----------------------------------------------
[ $# -eq 2 ] || print_usage_and_exit
echo "_$1" | grep -iq '^_[A-Z][0-9][0-9]$' || print_usage_and_exit
echo "_$2" | grep -iq '^_[A-Z][0-9][0-9]$' || print_usage_and_exit

# --- 駅ナンバーの存在確認 -------------------------------------------
printf '%s\n%s\n' $1 $2                          |
sort                                             |
join -1 1 -2 1 $Homedir/DATA/SNUM2RWSN_MST.TXT - |
awk '{print} END{exit (NR>=2)?0:1}'              > $Tmp-2stns
if [ $? -ne 0 ]; then
  echo "${0##*/}: 存在しない駅ナンバーが指定されています。"
  exit 1
fi

# --- 同一路線の駅ナンバーであることの確認 ---------------------------
cat $Tmp-2stns              |
sed 's/^\(.\).*/\1/'        |
tr a-z A-Z                  |
uniq                        |
awk 'END{exit (NR==1)?0:1}'
if [ $? -ne 0 ]; then
  echo "${0##*/}: 異なる路線の駅ナンバーは指定できません。"
  exit 1
fi

# --- 駅ナンバー変数をセット -----------------------------------------
from_snum=$1
to_snum=$2


######################################################################
# API呼び出し準備(路線コードと方面コードの決定)
######################################################################

# --- 当該路線駅ナンバーマスターファイルの作成 -----------------------
cat $Homedir/DATA/SNUM2RWSN_MST.TXT |
# 1:駅ナンバー 2:路線コード 3:路線名 4:路線駅コード 5:駅名 6:方面駅コード
grep -i "^${from_snum%[0-9][0-9]}"  | # 指定路線のみに絞り込む
tee $Tmp-this-rw-stn-mst            | # 指定路線の路線駅マスター
awk '$6!="-"'                       > $Tmp-dirstns # 方面駅コードを持つ駅のみに絞り込む

# --- 駅コードから駅ナンバーを引くマスターファイルを作る -------------
cat $Tmp-this-rw-stn-mst |
# 1:駅ナンバー 2:路線コード 3:路線名 4:路線駅コード 5:駅名 6:方面駅コード
awk '{print $4,$1}'      |
# 1:路線駅コード 2:駅ナンバー
sort -k1,1               > $Tmp-sc2snum

# --- 路線コードの取得 -----------------------------------------------
rwcode=$(awk '{print $2;exit;}' $Tmp-dirstns)

# --- 方面コード群の取得 ---------------------------------------------
dircodes=$(cat $Tmp-dirstns                                             |
           if   [ ${to_snum#[A-Za-z]} -gt ${from_snum#[A-Za-z]} ]; then #
             awk 'substr($1,2,2)*1>'${from_snum#[A-Za-z]}'*1{print $6}' #
           elif [ ${to_snum#[A-Za-z]} -lt ${from_snum#[A-Za-z]} ]; then #
             awk 'substr($1,2,2)*1<'${from_snum#[A-Za-z]}'*1{print $6}' #
           else                                                         #
             awk '$1=="'$to_snum'"{print $6}'                           #
           fi                                                           |
           tr '\n' '|'                                                  |
           sed 's/\./\\./g'                                             |
           sed 's/^\(.\)/(\1/'                                          |
           sed 's/|$/)/'                                                )
if [ ${#dircodes} -le 2 ]; then
  echo "${0##*/}: 方面が特定できません。同じ駅ナンバーを指定していませんか?"
  exit 1
fi


######################################################################
# 列車ロケーション情報API呼び出しと、キャッシュ作成
# (キャッシュの有効期限が切れているならば)
######################################################################

# --- キャッシュファイル名の設定 -------------------------------------
File_cache="$Homedir/TMP/odpt:Train-$rwcode.cache.txt"

# --- 呼び出しURLの設定 ----------------------------------------------
url='https://api.tokyometroapp.jp/api/v2/datapoints?rdf:type=odpt:Train&odpt:railway='$rwcode'&acl:consumerKey='$appid

# --- 有効期限内の指定路線のキャッシュファイルはあるか?(あれば戻り値0)
touch $Tmp-now # 現在日時タイムスタンプを持つファイルを作る
mkdir -p "${File_cache%/*}"
find "${File_cache%/*}" -name "${File_cache##*/}" -newer $Tmp-now |
awk 'END{exit (NR>0)?0:1}'
cache_is_fresh=$((1-$?))

# --- 有効キャッシュがなければ作る(タイムスタンプは有効期限日時に設定)
[ $cache_is_fresh -eq 0 ] && { curl -s $url | parsrj.sh > "$File_cache"; }

# --- キャッシュ中に存在するデータ生成日時と有効期限日時を読み取る ---
cat "$File_cache"                                                         |
awk '$1~/\.dct:valid$/{print "v",$2} $1~/\.dc:date$/{print "d",$2}'       |
# 1:識別子(情報日時なら"d"、有効期限日時なら"v") 2:日時(ISO8601形式)      #
sort                                                                      |
awk '$1=="d"&&d==""{d=$0} $1=="v"{v=$0;exit} END{printf("%s\n%s\n",d,v)}' |
# 1:識別子(情報日時なら"d"、有効期限日時なら"v") 2:左記の最古の日時(ISO8601形式)
sed 's/\(.\{6\}\)$/ \1/'                                                  |
awk '{gsub(/[^0-9]/,"",$2);$3=substr($3,1,3)*3600+substr($3,5)*60;print}' |
# 1:識別子("d"or"v") 2:左記の最古の有効期限日時(現地時間のYYYYMMDDHHMMSS) 3:UTCからの秒数
TZ=UTC+0 calclock 2                                                       |
awk '{print $1,$3-$4}'                                                    |
# 1:識別子("d"or"v") 2:左記の最古の日時(UNIX時間)                         #
calclock -r 2                                                             |
awk '{print $1,$3}'                                                       |
# 1:識別子("d"or"v") 2:左記の最古の日時(現地時間のYYYYMMDDHHMMSS)         #
sed 's/[0-9][0-9]/ &/g'                                                   |
sed 's/ \([0-9][0-9]\) /\1/'                                              |
# 1:識別子("d"or"v") 2:左記の最古の日時(現地時間のYYYY MM DD HH MM SS)    #
grep -E '^[dv] [0-9]{4} [0-9]{2} [0-9]{2} [0-9]{2} [0-9]{2} [0-9]{2}$'    > $Tmp-timestamps
if [ ! -s $Tmp-timestamps ]; then
  date '+%Y %m %d %H %M %S'           |                 # 営業休止時間帯等
  awk '{print "d",$0; print "v",$0;}' > $Tmp-timestamps # データが取れなかったら現在日時を入れる
fi

# --- キャッシュファイルのタイムスタンプを有効期限日時にする ---------
if [ $cache_is_fresh -eq 0 ]; then
  touch -t $(awk '$1=="v"{print $2 $3 $4 $5 $6 "." $7}' $Tmp-timestamps) "$File_cache"
fi


######################################################################
# API取得データ(列車ロケーション情報の取得)の加工
######################################################################

# --- 必要な項目・区間&方面のみに絞り込んだ在線位置マスターファイルを作る
cat "$File_cache"                                                    |
sed 's/^\$\[\([0-9]\{1,\}\)\]\.[^:]\{1,\}:/\1 /'                     |
awk '$2=="railDirection"  {$2=1;print;}                              #
     $2=="fromStation"    {$2=2;print;}                              #
     $2=="toStation"      {$2=3;print;}                              #
     $2=="trainType"      {$2=4;print;}                              #
     $2=="terminalStation"{$2=5;print;}                              #
     $2=="trainOwner"     {$2=6;print;}'                             |
sort -k1n,2n                                                         |
awk '{print $3}'                                                     |
awk 'NR%6!=0{printf("%s ",$0)} NR%6==0{print $0}'                    |
# 1:方面コード 2:発車駅コード 3:到着駅コード 4:種別コード 5:目的駅コード 6:車両所有業者コード
sort -k2,2                                                           |
join -1 1 -2 2 -o 2.1,2.2,1.2,2.3,2.4,2.5,2.6 $Tmp-sc2snum -         |
# 1:方面コード 2:発車駅コード 3:発車駅ナンバー 4:到着駅コード 5:種別コード 6:目的駅コード 7:車両所有業者コード
awk '{print $1,$3,$4,$5,$6,$7}'                                      |
# 1:方面コード 2:発車駅ナンバー 3:到着駅コード 4:種別コード 5:目的駅コード 6:車両所有業者コード
sort -k3,3                                                           |
join -1 1 -2 3 -a 2 -o 2.1,2.2,2.3,1.2,2.4,2.5,2.6 $Tmp-sc2snum -    |
sed 's/  / - /'                                                      |
# 1:方面コード 2:発車駅ナンバー 3:到着駅コード 4:到着駅ナンバー(無い場合は"-") 5:種別コード 6:目的駅コード 7:車両所有業者コード
awk '{print $1,$2,$4,$5,$6,$7}'                                      |
# 1:方面コード 2:発車駅ナンバー 3:到着駅ナンバー(無い場合は"-") 4:種別コード 5:目的駅コード 6:車両所有業者コード
awk '$3=="-"{snumex = $2 "0";                                     }  #
     $3!="-"{rwletter=substr($2,1,1);                                #
             from = substr($2,2,2)*10;                               #
             to   = substr($3,2,2)*10;                               #
             snumex = sprintf("%s%03d",rwletter,from+(to-from)/2);}  #
     {print $1,snumex,$4,$5,$6;                                   }' |
# 1:方面コード 2:現在居る3桁駅ナンバー(3桁目は0または5で、5は中間にいることを表す)
# 3:種別コード 4:目的駅コード 5:車両所有業者コード                   #
awk '$1~/^'"$dircodes"'$/{print $2,$3,$4,$5}'                        > $Tmp-this-rw-dir-loc
# 1:現在居る3桁駅ナンバー(3桁目は0または5で、5は中間にいることを表す) 2:種別コード 3:目的駅コード 4:車両所有業者コード

# --- コードを名称化し、列車存在位置から列車名を引くマスターファイルを作る
cat $Tmp-this-rw-dir-loc                                                     |
# 1:現在居る3桁駅ナンバー(3桁目は0または5で、5は中間にいることを表す) 2:種別コード 3:目的駅コード 4:車両所有業者コード
sort -k2,2                                                                   |
join -1 1 -2 2 -a 2 -o 2.1,2.2,1.2,2.3,2.4 $Homedir/DATA/METRO_VOC_MST.TXT - |
sed 's/\([^. ]\{1,\}\)  /\1 \1 /'                                            |
awk '{print $1,$3,$4,$5}'                                                    |
# 1::現在居る3桁駅ナンバー(3桁目は0または5で、5は中間にいることを表す) 2:種別名 3:目的駅コード 4:車両所有業者コード
sort -k3,3                                                                   |
join -1 1 -2 3 -a 2 -o 2.1,2.2,2.3,1.2,2.4 $Homedir/DATA/METRO_VOC_MST.TXT - |
sed 's/\([^. ]\{1,\}\)  /\1 \1 /'                                            |
awk '{print $1,$2,$4,$5}'                                                    |
# 1:現在居る3桁駅ナンバー(3桁目は0または5で、5は中間にいることを表す) 2:種別名 3:目的駅名 4:車両所有業者コード
sort -k4,4                                                                   |
join -1 1 -2 4 -a 2 -o 2.1,2.2,2.3,2.4,1.2 $Homedir/DATA/METRO_VOC_MST.TXT - |
sed 's/\([^. ]\{1,\}\)  /\1 \1 /'                                            |
awk '{print $1,$2,$3,$5}'                                                    |
# 1:現在居る3桁駅ナンバー(3桁目は0または5で、5は中間にいることを表す) 2:種別名 3:目的駅名 4:車両所有業者名
sort -k1,1                                                                   > $Tmp-this-rw-loc


######################################################################
# 最終出力の作成
######################################################################

# --- 駅間を含む3駅ナンバーから駅名を得るマスターファイルを作る ------
#
cat $Tmp-this-rw-stn-mst                                                  |
# 1:駅ナンバー 2:路線コード 3:路線名 4:路線駅コード 5:駅名 6:方面駅コード #
sort -k1,1                                                                |
awk '{print $1,$5}'                                                       |
# 1:駅ナンバー 2:駅名                                                     #
awk '{rwletter = substr($1,1,1);    # 路線アルファベット                  # # 駅間の行を生成する
      n3       = substr($1,2,2)*10; # 3桁駅ナンバーの数字部分             #
      print sprintf("%s%03d",rwletter,n3  ),$2;                           #
      print sprintf("%s%03d",rwletter,n3+5),"-";             }'           > $Tmp-snumex2sn # 最後の1行は中間ではないので消す
# 1:3桁駅ナンバー 2:駅名(中間の場合は-)

# --- 最終出力を作る -------------------------------------------------
#
join -1 1 -2 1 -a 2 -o 2.1,1.2,1.3,1.4,2.2 $Tmp-this-rw-loc $Tmp-snumex2sn |
sed 's/  / - /g'                                                           |
sed 's/  / - /'                                                            |
# 1:3桁駅ナンバー 2:種別名(居ない時は"-") 3:目的駅名(居ない時は"-") 4:車両所有業者名(居ない時は"-") 5:駅名(中間の場合は"-")
awk '{print $1,$5,$2,$3,$4}'                                               |
# 1:3桁駅ナンバー 2:駅名(中間の場合は"-") 3:種別名 4:目的駅名 5:車両所有業者名
if   [ "0${to_snum#[A-Za-z]}" -lt "0${from_snum#[A-Za-z]}" ]; then         # # ・引数の順版が駅ナンバー順と反対方面だったら
  sort -k1r,1 | sed '1d'                                                   # #   降順にして、先頭行(存在しない駅間)をトル。
elif [ "0${to_snum#[A-Za-z]}" -gt "0${from_snum#[A-Za-z]}" ]; then         # # ・引数の順版が駅ナンバー順通りだったら
                sed '$d'                                                   # #   昇順のまま、最終行(存在しない駅間)をトル。
elif [ "${from_snum#[A-Za-z]}" = '01'                      ]; then         # # ・from,toともに06(分岐駅)未満だった時も
  sort -k1r,1 | sed '1d'                                                   # #   降順にして、先頭行(存在しない駅間)をトル。
else                                                                       # # ・from,toが同一で最大値の場合は
                sed '$d'                                                   # #   昇順のまま、最終行(存在しない駅間)をトル。
fi                                                                         |
awk '{snum=(match($1,/0$/))?substr($1,1,3):"|"; print snum,$2,$3,$4,$5;}'  | # 駅ナンバーを元に戻す(駅間の場合は"|"にする)
# 1:駅ナンバー(駅間の場合は"|") 2:駅名(駅間の場合は"-") 3:種別名 4:目的駅名 5:車両所有業者名
awk '{idx=($1=="'"$from_snum"'")?">>":".."; print idx,$0;}'                | # 指定駅の行だったら先頭に">>"を付ける
# 1:自位置インデックス 2:駅ナンバー(駅間の場合は"|") 3:駅名(駅間の場合は"-") 4:種別名 5:目的駅名 6:車両所有業者名
awk '$4!="-"{$4=(($2=="|")?"↓":"＊") $4;}                                 # # 種別名の手前に移動中"↓"か停車中"＊"かの印を付ける
     $5!="-"{$5=$5 "行";                 }                                 # # 目的駅名に接尾辞を付ける
     $6!="-"{$6="(" $6 "車両)";          }                                 # # 車両所有業者名に接尾辞を付ける
     {print;                             }'                                |
keta --                                                                    | # 左揃えにする
tr '-' ' '                                                                 | # - はnullを意味するので空白にする
sed 's/\([[:blank:]]\)＊/\1  /g'                                           | # 停車中の印"＊"をトル
sed 's/[[:blank:]]\{1,\}-//g'                                              | # 行末の不要な"-"をトル
sed 's/[[:blank:]]\{1,\}$//g'                                              | # 行末の不要な余白をトル
awk 'FNR==NR && $1=="d"{                                                   # 先頭に「○○現在」を付ける
       printf("%04d/%02d/%02d %02d:%02d:%02d現在\n\n",$2,$3,$4,$5,$6,$7);  #
     }                                                                     #
     FNR!=NR{                                                              #
       print;                                                              #
     }' $Tmp-timestamps -


######################################################################
# 正常終了
######################################################################

exit 0